// turbojet

#ifndef THERMO
	#define THERMO GasTbl
#endif
#include "SimpleTurbojet.arch"

#include "run.h"

// Switch to design mode
Eng.std_print();
setOption("switchDes", "DESIGN");
autoSolverSetup(); //Automatically setup the Ind/Dep var pairs for design case

// Design Parameters
real ThrustDes = $PARAM_THRUST_DES; //Design thrust [N]
real TempRatioDes = $PARAM_TEMP_RATIO_DES; //Tt4 over Tt2 ratio
real ThrustLowLim = $PARAM_THRUST_LOW_LIM; //Lowest thrust [N]
real ThrustHighLim = $PARAM_THRUST_HIGH_LIM; //Maximum thrust [N]

input_data2.close();

// Set additional independent variables
Independent ind_Wfuel{
    varName = "Eng.FusEng.Wfuel";
}
Independent ind_Win{
    varName = "Eng.InletStart.W_in";
}
Independent ind_effDesTrbH{
    varName = "Eng.TrbH.effDes";
}
Independent ind_effDesCmpH{
    varName = "Eng.CmpH.effDes";
}

// Set additional dependent variables
Dependent dep_Fn{
    eq_lhs = "Eng.Perf.Fn"; eq_rhs = "ThrustDes*getUnitsFactor(\"N\", \"lbf\")";
}
Dependent dep_T4qT2{
    eq_lhs = "Eng.BrnPri.Fl_O.Tt/Eng.CmpH.Fl_I.Tt"; eq_rhs = "TempRatioDes";
}
Dependent dep_effPolyTrbH{
    eq_lhs = "Eng.TrbH.effPoly"; eq_rhs = "0.70";
}
Dependent dep_effPolyCmpH{
    eq_lhs = "Eng.CmpH.effPoly"; eq_rhs = "0.70";
}

// Use polytropic efficiencies for compressor/turbine scaling?
real desEffPolyTrbH = TRUE;
real desEffPolyCmpH = TRUE;

// Add additional variable pairs to the solver
solver.addIndependent("ind_Wfuel");
solver.addDependent("dep_T4qT2");
solver.addIndependent("ind_Win");
solver.addDependent("dep_Fn");
if (desEffPolyTrbH){
    solver.addIndependent("ind_effDesTrbH");
    solver.addDependent("dep_effPolyTrbH");
}
if (desEffPolyCmpH){
    solver.addIndependent("ind_effDesCmpH");
    solver.addDependent("dep_effPolyCmpH");
}

// Prepare output file
OutFileStream outputfile {
    filename = "../output/Turbojet.out";
}
CaseRowViewer RowOutput {
    outStreamHandle = "outputfile";
    titleBody = "Model: ?????????? , Date: ?????????? , Time: ?????????? , Thermal Package: ??????????";
    titleVars = {"MODELNAME", "date", "timeOfDay", "THERMPACKAGE"}
    caseHeaderBody = "Case ???";
    caseHeaderVars = {"CASE"}
    showHeaders = TRUE; //Keep auto display from adding header

    variableList = {
	"solver.converged:???        = Conv",
	"solver.iterationCounter:??? = Iter",
    "switchDes:????????????      = Mode",
    
    "Eng.InletStart.W:??????S???  = Wa_in[kg/sec]@kg/sec",
    "Eng.BrnPri.Wfuel:??????S???  = Wf_burner[kg/sec]@kg/sec",
    "Eng.FusEng.Wfuel:??????S???  = Wf_pump[kg/sec]@kg/sec",
    "Eng.Perf.Wfuel:??????S???    = Wf_measure[kg/sec]@kg/sec",
    "Eng.NozPri.Fl_O.W:??????S??? = W_out[kg/sec]@kg/sec",
    
    "Eng.Perf.Fg:??????S???    = Gross Thrust[N]@N",
    "Eng.Perf.Fn:??????S???    = Net Thrust[N]@N",
    "Eng.Perf.Fram:??????S???  = Ram Drag[N]@N",
    "Eng.Perf.SFC:??????S???   = TSFC[kg/N/sec]@kg/(N*sec)",
    "Eng.Perf.etaTherm:???S??? = Eta_Thermal",
    
    "Eng.BrnPri.Fl_O.Tt/Eng.CmpH.Fl_I.Tt:??????S??? = Tt4/Tt2",
    "Eng.CmpH.PR:??????S???                         = OPR",
    
    "Eng.Amb.alt:??????S???    = alt[m]@m",
    "Eng.Amb.MN:????S???       = M0",
    "Eng.Amb.Pt:?????????S???  = Pt0[Pa]@Pa",
    "Eng.Amb.Tt:???????S???    = Tt0[K]@K",
    
    "Eng.Inlet.Fl_I.Aphy:???????S??? = Area1[cm2]@cm2",
    "Eng.Inlet.Fl_I.W:???????S???    = W1[kg/sec]@kg/sec",
    "Eng.Inlet.Fl_I.MN:???????S???   = M1",
    "Eng.Inlet.Fl_I.gamt:???????S??? = gamma1",
    "Eng.Inlet.Fl_I.Cpt:???????S???  = Cp1[J/K/kg]@J/(kg*K)",
    "Eng.Inlet.Fl_I.Pt:???????S???   = Pt1[Pa]@Pa",
    "Eng.Inlet.Fl_I.Tt:???????S???   = Tt1[K]@K",
    "Eng.Inlet.Fl_I.ht:???????S???   = ht1[J/kg]@J/kg",
    
    "Eng.CmpH.Fl_I.Aphy:???????S??? = Area2[cm2]@cm2",
    "Eng.CmpH.Fl_I.W:???????S???    = W2[kg/sec]@kg/sec",
    "Eng.CmpH.Fl_I.MN:???????S???   = M2",
    "Eng.CmpH.Fl_I.gamt:???????S??? = gamma2",
    "Eng.CmpH.Fl_I.Cpt:???????S???  = Cp2[J/K/kg]@J/(kg*K)",
    "Eng.CmpH.Fl_I.Pt:???????S???   = Pt2[Pa]@Pa",
    "Eng.CmpH.Fl_I.Tt:???????S???   = Tt2[K]@K",
    "Eng.CmpH.Fl_I.ht:???????S???   = ht2[J/kg]@J/kg",
    
    "Eng.CmpH.Nc:??????S???    = Nc_HPC[rpm]@rpm",
    "Eng.CmpH.Wc:??????S???    = Wc_HPC[kg/sec]@kg/sec",
    "Eng.CmpH.PR:??????S???    = PR_HPC",
    "Eng.CmpH.eff:????S???     = Eta_Isen_HPC",
    "Eng.CmpH.effPoly:????S??? = Eta_Poly_HPC",
    "Eng.CmpH.pwr:??????S???   = HPCPower_2_Shaft[HP]@hp",
    
    "Eng.BrnPri.Fl_I.Aphy:???????S??? = Area3[cm2]@cm2",
    "Eng.BrnPri.Fl_I.W:???????S???    = Wa3[kg/sec]@kg/sec",
    "Eng.BrnPri.Wfuel:??????S???      = Wf3[kg/sec]@kg/sec",
    "Eng.BrnPri.Fl_I.MN:???????S???   = M3",
    "Eng.BrnPri.Fl_I.gamt:???????S??? = gamma3",
    "Eng.BrnPri.Fl_I.Cpt:???????S???  = Cp3[J/K/kg]@J/(kg*K)",
    "Eng.BrnPri.Fl_I.Pt:???????S???   = Pt3[Pa]@Pa",
    "Eng.BrnPri.Fl_I.Tt:???????S???   = Tt3[K]@K",
    "Eng.BrnPri.Fl_I.ht:???????S???   = ht3[J/kg]@J/kg",

    "Eng.TrbH.Fl_I.Aphy:???????S??? = Area4[cm2]@cm2",
    "Eng.TrbH.Fl_I.W:???????S???    = W4[kg/sec]@kg/sec",
    "Eng.TrbH.Fl_I.MN:???????S???   = M4",
    "Eng.TrbH.Fl_I.gamt:???????S??? = gamma4",
    "Eng.TrbH.Fl_I.Cpt:???????S???  = Cp4[J/K/kg]@J/(kg*K)",
    "Eng.TrbH.Fl_I.Pt:???????S???   = Pt4[Pa]@Pa",
    "Eng.TrbH.Fl_I.Tt:???????S???   = Tt4[K]@K",
    "Eng.TrbH.Fl_I.ht:???????S???   = ht4[J/kg]@J/kg",

    "Eng.TrbH.Np:??????S???      = Nc_HPT[rpm/sqrt(K)]@rpm/SQRT_K",
    "Eng.TrbH.Wp:??????S???      = Wc_HPT[(kg*SQRT_K)/(sec*Pa)]@kg*SQRT_K/(sec*Pa)",
    "Eng.TrbH.PR:??????S???      = PR_HPT",
    "Eng.TrbH.eff:??????S???     = Eta_Isen_HPT",
    "Eng.TrbH.effPoly:??????S??? = Eta_Poly_HPT",
    "Eng.TrbH.pwr:??????S???     = HPTPower_2_Shaft[HP]@hp",
	
    "Eng.NozPri.Fl_I.Aphy:???????S??? = Area5[cm2]@cm2",
    "Eng.NozPri.Fl_I.W:???????S???    = W5[kg/sec]@kg/sec",
    "Eng.NozPri.Fl_I.MN:???????S???   = M5",
    "Eng.NozPri.Fl_I.gamt:???????S??? = gamma5",
    "Eng.NozPri.Fl_I.Cpt:???????S???  = Cp5[J/K/kg]@J/(kg*K)",
    "Eng.NozPri.Fl_I.Pt:???????S???   = Pt5[Pa]@Pa",
    "Eng.NozPri.Fl_I.Tt:???????S???   = Tt5[K]@K",
    "Eng.NozPri.Fl_I.ht:???????S???   = ht5[J/kg]@J/kg",

    "Eng.NozPri.Fl_O.Aphy:???????S??? = Area6[cm2]@cm2",
    "Eng.NozPri.Fl_O.W:???????S???    = W6[kg/sec]@kg/sec",
    "Eng.NozPri.Fl_O.MN:???????S???   = M6",
    "Eng.NozPri.Fl_O.gamt:???????S??? = gamma6",
    "Eng.NozPri.Fl_O.Cpt:???????S???  = Cp6[J/K/kg]@J/(kg*K)",
    "Eng.NozPri.Fl_O.Pt:???????S???   = Pt6[Pa]@Pa",
    "Eng.NozPri.Fl_O.Tt:???????S???   = Tt6[K]@K",
    "Eng.NozPri.Fl_O.ht:???????S???   = ht6[J/kg]@J/kg",

    "Eng.NozPri.Fl_O.V:???????S???  = Vx6[m/sec]@m/sec",
    "Eng.NozPri.Fl_O.Ps:???????S??? = Ps6[Pa]@Pa",
    "Eng.NozPri.Fl_O.Ts:???????S??? = Ts6[K]@K"    
    }
    unitSystem = "SI";
    showErrors = FALSE; // Dont print out failed case
}


// Run the design case
CASE = 0;
cout << "Case: "<< CASE << endl;
cout << solver.list("Independent",FALSE) <<endl;
cout << solver.list("Dependent",FALSE) <<endl;
run();
RowOutput.update();//Stored Data

// Print out map scaling factors
cout << "Map scaling factors:" << endl;
cout << "HPC effS " << Eng.CmpH.S_map.s_effDes << endl;
cout << "HPC NcS " << Eng.CmpH.S_map.s_NcDes << endl;
cout << "HPC PRS " << Eng.CmpH.S_map.s_PRdes << endl;
cout << "HPC WcS " << Eng.CmpH.S_map.s_WcDes << endl;
cout << endl;
cout << "HPT effS " << Eng.TrbH.S_map.s_effDes << endl;
cout << "HPT NcS " << Eng.TrbH.S_map.s_NpDes << endl;
cout << "HPT PRS " << Eng.TrbH.S_map.s_PRdes << endl;
cout << "HPT WcS " << Eng.TrbH.S_map.s_WpDes << endl;

//Switch to design mode
setOption("switchDes", "OFFDESIGN");
autoSolverSetup();

// Add additional variable pairs to the solver
solver.addIndependent("ind_Wfuel");
solver.addDependent("dep_Fn");

// Run the off design case
cout << "Turn on off-design mode"<< endl;
cout << solver.list("Independent",FALSE) <<endl;
cout << solver.list("Dependent",FALSE) <<endl;

// Low Thrust sweep
real ThrustCur;
for (ThrustCur = ThrustDes; ThrustCur > ThrustLowLim; ThrustCur -= 2.5)
{
    CASE++;
    cout << "Case: "<< CASE << endl;
    dep_Fn.eq_rhs = "ThrustCur*getUnitsFactor(\"N\", \"lbf\")";
    run();
    if(!solver.converged){run();} //Run one more run to help converge
    RowOutput.update();//Stored Data
}
// High Thrust sweep
for (ThrustCur = ThrustDes; ThrustCur < ThrustHighLim; ThrustCur += 2.5)
{
    CASE++;
    cout << "Case: "<< CASE << endl;
    dep_Fn.eq_rhs = "ThrustCur*getUnitsFactor(\"N\", \"lbf\")";
    run();
    if(!solver.converged){run();} //Run one more run to help converge
    RowOutput.update();//Stored Data
}

quit();

